143. Sort Colors II 排颜色II

Description
Given an array of n objects with k different colors (numbered from 1 to k), 
sort them so that objects of the same color are adjacent, 
with the colors in the order 1, 2, ... k.
You are not suppose to use the library's sort function for this problem.
k <= n
描述（中文）
给定一个有n个对象（包括k种不同的颜色，并按照1到k进行编号）的数组，将对象进行分类使相同颜色的对象相邻，并按照1,2，...k的顺序进行排序。
不能使用代码库中的排序函数来解决这个问题
k <= n

Example1
Input: 
[3,2,2,1,4] 
4
Output: 
[1,2,2,3,4]

Example2
Input: 
[2,1,1,2,2] 
2
Output: 
[1,1,2,2,2]

Challenge
A rather straight forward solution is a two-pass algorithm using counting sort. 
That will cost O(k) extra memory. Can you do it without using extra memory?
挑战
一个相当直接的解决方案是使用计数排序扫描2遍的算法。这样你会花费O(k)的额外空间。你否能在不使用额外空间的情况下完成？


解法（优化的快速排序， Running Time O(n*log(k)）

public class Solution {
    /**
     * @param colors: A list of integer
     * @param k: An integer
     * @return: nothing
     */
    public void sortColors2(int[] colors, int k) {
        // write your code here
        colorQuickSort(colors, 0, colors.length - 1, 1, k);
    }
    
    private void colorQuickSort(int[] colors, int start, int end, int colorFrom, int colorTo) {
        if (colorFrom == colorTo) {
            return;
        }
        if (start >= end) {
            return;
        }
        
        int colorPivot = (colorFrom + colorTo) / 2;
        int left = start, right = end;
        while (left <= right) {
            while (left <= right && colors[left] <= colorPivot) {
                left++;
            }
            while (left <= right && colors[right] > colorPivot) {
                right--;
            }
            
            // 经过上面两个while loop, left停在一个 > colorPivot 的颜色
            // right停在一个 <= colorPivot的颜色， 交换二者然后继续
            if (left <= right) {
                swap(colors, left, right);
                left++;
                right--;
            }
        }
        
        colorQuickSort(colors, start, right, colorFrom, colorPivot);
        colorQuickSort(colors, left, end, colorPivot + 1, colorTo);
    }
    
    private void swap(int[] colors, int i, int j) {
        int temp = colors[i];
        colors[i] = colors[j] ;
        colors[j] = temp;
    }
}
