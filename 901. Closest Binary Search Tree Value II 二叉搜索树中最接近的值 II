901. Closest Binary Search Tree Value II 二叉搜索树中最接近的值 II

给定一棵非空二叉搜索树以及一个target值，找到 BST 中最接近给定值的 k 个数。
Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.

样例
Example 1:

Input:
{1}
0.000000
1
Output:
[1]
Explanation：
Binary tree {1},  denote the following structure:
 1
Example 2:

Input:
{3,1,4,#,2}
0.275000
2
Output:
[1,2]
Explanation：
Binary tree {3,1,4,#,2},  denote the following structure:
  3
 /  \
1    4
 \
  2
挑战
Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?

注意事项
Given target value is a floating point.
You may assume k is always valid, that is: k ≤ total nodes.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.


/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param root: the given BST
     * @param target: the given target
     * @param k: the given k
     * @return: k values in the BST that are closest to the target
     */
    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        // write your code here
        
        Stack<TreeNode> nextStack = new Stack<>();
        Stack<TreeNode> prevStack = new Stack<>();
        findTarget(nextStack, root, target);
        prevStack.addAll(nextStack);
        getPrev(prevStack);
        
        List<Integer> answer = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (prevStack.isEmpty()) {
                answer.add(nextStack.peek().val);
                getNext(nextStack);
            } else if (nextStack.isEmpty()){
                answer.add(prevStack.peek().val);
                getPrev(prevStack);
            } else if (target - prevStack.peek().val < nextStack.peek().val - target) {
                answer.add(prevStack.peek().val);
                getPrev(prevStack);
            } else {
                answer.add(nextStack.peek().val);
                getNext(nextStack);
            }
            
        }
        return answer;
    }
    
    private void findTarget(Stack<TreeNode> stack, TreeNode root, double target ){
        // 非递归用while
        while (root != null) {
            stack.push(root);
            if (target < root.val) {
                root = root.left;
            } else {
                root = root.right;
            }
            
        }
    }
    
    private void getNext(Stack<TreeNode> stack) {
        TreeNode node = stack.peek();
        if (node.right!= null) {
            node = node.right;
            while (node != null) {
                stack.push(node);
                node = node.left;
            }
        } else {
            while (!stack.isEmpty()) {
                node = stack.pop();
                if (!stack.isEmpty() && stack.peek().right != node) {
                    break;
                }
            }
        }
    }
    
    private void getPrev(Stack<TreeNode> stack) {
        TreeNode node = stack.peek();
        if (node.left!= null) {
            node = node.left;
            while (node != null) {
                stack.push(node);
                node = node.right;
            }
        } else {
            while (!stack.isEmpty()) {
                node = stack.pop();
                if (!stack.isEmpty() && stack.peek().left != node) {
                    break;
                }
            }
        }
    }    
}
