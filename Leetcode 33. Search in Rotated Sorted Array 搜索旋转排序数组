33. Search in Rotated Sorted Array
搜索旋转排序数组
题目
​https://leetcode.com/problems/search-in-rotated-sorted-array/​

You are given an integer array nums sorted in ascending order, and an integer target.
Suppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
升序排列的整数数组 nums 在预先未知的某个点上进行了旋转（例如， [0,1,2,4,5,6,7] 经旋转后可能变为 [4,5,6,7,0,1,2] ）。

If target is found in the array return its index, otherwise, return -1.
请你在数组中搜索 target ，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
Constraints:

1 <= nums.length <= 5000

-10^4 <= nums[i] <= 10^4

All values of nums are unique.

nums is guranteed to be rotated at some pivot.

-10^4 <= target <= 10^4

分析
二分法，mid和end比较： 

1. 第一种情况 nums[mid] > nums[end]： mid在第一段上升区间，跟target比较:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
  


nums[mid] > nums[end]: mid在第一段上升区间
如果 target 的值在 nums[start] 和 nums[mid]之间:
这个区间已经是排好升序了，继续做正常的二分查找即可得到target的位置。
应前移 end = mid；

否则，target在 mid到end之间，这个区间仍然是一个search in rotated sorted array问题。
则后移 start = mid，（有点像recursion的感觉）去继续用这个题目的解法查找 target

2. 第二种情况 nums[mid] < nums[end]：mid在第二段上升区间，nums[mid] 跟 target 比较:


nums[mid] < nums[end]: mid 在第二段上升区间
如果 target 的值在 nums[mid] 和 nums[end]之间:
这个区间已经是排好升序了，继续做正常的二分查找即可得到target的位置。

应后移 start = mid ；

否则，target 在 start 和 mid 之间，这个区间仍然是一个search in rotated sorted array问题
应前移 end = mid，（有点像recursion的感觉）去继续用这个题目的解法查找 target

题解
Java
class Solution {
    public int search(int[] nums, int target) {
        
        // corner case
        if(nums.length == 0 || nums == null){
            return -1;
        }
        
        // binary search
        int start = 0;
        int end = nums.length-1;
        while(start+1 < end){
            int mid = start+(end-start)/2;
            if(target == nums[mid]){
                return mid;
            }
            // mid在第一个上升区间
            if(nums[mid] > nums[end]){
                // 如果 target 在 start 和 mid 之间，该区间无翻转，正常二分
                if( nums[start] <= target && target <= nums[mid]){
                    // 前移 end
                    end = mid;
                } else {
                    // 在另一区间，则后移start, 继续做缩小范围后的此题
                    start = mid;
                }
            }
            // mid在第二个上升区间
            else{
                // 如果 target 在 mid 和 end 之间，该区间无翻转，正常二分
                if( nums[mid] <= target && target <= nums[end]){
                    // 后移 start
                    start = mid;
                } else {
                    // 在另一区间，前移 end，继续做缩小范围后的此题
                    end = mid;
                }
            }
        }
        
        if(nums[start] == target){
            return start;
        }
        else if(nums[end] == target){
            return end;
        }
        else return -1;
    }
}
