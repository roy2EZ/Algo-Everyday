63. Search in Rotated Sorted Array II 搜索旋转排序数组 II

跟进“搜索旋转排序数组”，假如有重复元素又将如何？
是否会影响运行时间复杂度？
如何影响？
为何会影响？
写出一个函数判断给定的目标值是否出现在数组中。

样例
Follow up for Search in Rotated Sorted Array:

What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.

样例
Example 1:

Input:
[]
1
Output:
false
Example 2:

Input:
[3,4,4,5,7,0,1,2]
4
Output:
true

解题思路：
如果出现重复数字那么二分法最坏情况：数据是 [1,1,1,1... 1] 里有一个0。
在这种情况下二分法就没有意义了因为复杂度是O(n)
因此写个for循环最坏也是O(n)，那就写个for循环就好了
反正面试考的不是你在这个题上会不会用二分法。这个题的考点是你想不想得到最坏情况。

public class Solution {
    /*
     * @param A: an integer ratated sorted array and duplicates are allowed
     * @param target: An integer
     * @return: a boolean 
     */
    public boolean search(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        while (start <= end){
            int mid = start + (end - start) / 2;
            if (nums[mid] == target)
                return true;
            if (nums[start] < nums[mid]){
                if (nums[start] <= target && target < nums[mid])
                    end = mid - 1;
                else
                    start = mid + 1;
            }else if(nums[start] > nums[mid]){
                if (nums[mid] < target && target <= nums[end])
                    start = mid + 1;
                else
                    end = mid - 1;
            }else {
                //If nums[start] == nums[mid], just move start to the next index. 
                //So the worst case, that the array's elements are same, is O(n).
                start++;
            }
        }
        return false;
    }
}


// worst case 如果用O(n)的for循环:

public class Solution {
    
    public boolean search(int[] A, int target) {
        for (int i = 0; i < A.length; i ++) {
            if (A[i] == target) {
                return true;
            }
        }
        return false;
    }
}
