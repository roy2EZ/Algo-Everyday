153. Combination Sum II 数字组合 II

给定一个数组 num 和一个整数 target. 找到 num 中所有的数字之和为 target 的组合.
Given an array num and a number target. Find all unique combinations in num where the numbers sum to target.

样例
Example 1:

Input: num = [7,1,2,5,1,6,10], target = 8
Output: [[1,1,6],[1,2,5],[1,7],[2,6]]
Example 2:

Input: num = [1,1,1], target = 2
Output: [[1,1]]
Explanation: The solution set must not contain duplicate combinations.

注意事项
Each number in num can only be used once in one combination.
All numbers (including target) will be positive integers.
Numbers in a combination a1, a2, … , ak must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak)
Different combinations can be in any order.
The solution set must not contain duplicate combinations.
在同一个组合中, num 中的每一个数字仅能被使用一次.
所有数值 (包括 target ) 都是正整数.
返回的每一个组合内的数字必须是非降序的.
返回的所有组合之间可以是任意顺序.
解集不能包含重复的组合.

解题思路：DFS
public class Solution {
    /**
     * @param num: Given the candidate numbers
     * @param target: Given the target number
     * @return: All the combinations that sum to target
     */
     
     
    private List<List<Integer>> answer = new ArrayList<>();
    
    private Stack<Integer> stack = new Stack<>();
    
    
    private void dfs(int[] num, int start, int target) {
        if (target == 0) {
            answer.add(new ArrayList<>(stack));
            return;
        }
        
        if (start >= num.length||target<0) return;
        
        for (int i = start;i<num.length;i++) {
            if (i==start||num[i-1]!=num[i]) {
                stack.push(num[i]);
                dfs(num,i+1,target-num[i]);
                stack.pop();
            }
        }
    }
    
    
    public List<List<Integer>> combinationSum2(int[] num, int target) {
        // write your code here
        Arrays.sort(num);
        dfs(num,0,target);
        return answer;
    }
}
