62. Search in Rotated Sorted Array 搜索旋转排序数组

假设有一个排序的按未知的旋转轴旋转的数组(比如，0 1 2 4 5 6 7 可能成为4 5 6 7 0 1 2)。
给定一个目标值进行搜索，如果在数组中找到目标值返回数组中的索引位置，否则返回-1。你可以假设数组中不存在重复的元素。
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

样例
Example 1:

Input: [4, 5, 1, 2, 3] and target=1, 
Output: 2.
Example 2:

Input: [4, 5, 1, 2, 3] and target=0, 
Output: -1.
挑战
O(logN) time

解题思路：二分法，注意使用数列的最后一个数来帮助讨论target和A[mid]所在位置的关系，画图可以帮助此分析
public class Solution {
    /**
     * @param A: an integer rotated sorted array
     * @param target: an integer to be searched
     * @return: an integer
     */
    public int search(int[] A, int target) {
        // write your code here
        
        if(A == null || A.length == 0) {
            return -1;
        }
        
        int left = 0, right = A.length - 1;
        int last = A[right]; // 用最后一个数来判断target和A[mid]是否在同样的部分

        while (left + 1 < right) {
            int mid = left + (right - left) / 2;
            if (A[mid] == target) {return mid;}
            if ((target > last && A[mid] > last) || (target <= last) && A[mid] <= last ) {
                // 如果target 和 A[mid]在同样的上升区间，就正常二分
                if (A[mid] > target) {
                    right = mid;
                } else {
                    left = mid;
                }
            } else {
                // 如果target和A[mid]不在相同的上升区间
                if (A[mid] > target) {
                    left = mid;
                } else {
                    right = mid;
                }
            }
        }
        
        if (A[left] == target) {
            return left;
        }
        if (A[right] == target) {
            return right;
        }
        
        return -1;
    }
}
