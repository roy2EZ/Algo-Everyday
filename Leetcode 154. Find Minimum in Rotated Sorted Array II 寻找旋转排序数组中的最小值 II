154. Find Minimum in Rotated Sorted Array II
寻找旋转排序数组中的最小值 II
题目：
​https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).
Find the minimum element.
The array may contain duplicates.

Example 1:

Input: [1,3,5]
Output: 1
Example 2:

Input: [2,2,2,0,1]
Output: 0
Note:

This is a follow up problem to Find Minimum in Rotated Sorted Array.

Would allow duplicates affect the run-time complexity? How and why?

分析
与153题区别就是有重复的数字。解题要点：

在Binary Serach开始之前，如果前面一些数字跟最后一个数字是重复的，比如[3,3,3,1,2,3]这种，就要跳过前面那些重复的数字3，让start指针一直移动到下一个新的数字，再开始binary search

如果nums[mid] > nums[end]，说明转折发生在后半段，start后移

Otherwise说明转折发生在前半段，end前移

最后start和end相邻时，可能找到的是转移的交界处，也可能是转移之后的头两个数字，要想明白改return谁：

start位置的数字小，就return nums[start]

otherwise return nums[end]

题解
Java
class Solution {
    public int findMin(int[] nums) {
    
        // corner case: empty array
        if (nums.length == 0 || nums == null) return -1;
        
        // binary search
        int start = 0;
        int end = nums.length - 1;
        while (start + 1 < end) {
            // if array is like [3,3,3,1,2,3]
            // nums[start] == nums[nums.length - 1]
            // skip all duplicated elements at front which equal to last element
            while (start != end && nums[start] == nums[nums.length - 1]) {
                start++;
            }
            
            // then do binary search
            int mid = start + (end - start) / 2;
            
            if (nums[mid] > nums[end]) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        if (nums[start] < nums[end]){
            return nums[start];
        }
        else {
            return nums[end];
        }
        
    }
}
