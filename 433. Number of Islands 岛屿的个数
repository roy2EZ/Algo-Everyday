433. Number of Islands
岛屿的个数

给一个 01 矩阵，求不同的岛屿的个数。

0 代表海，1 代表岛，如果两个 1 相邻，那么这两个 1 属于同一个岛。我们只考虑上下左右为相邻。Given a boolean 2D matrix, 0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider up/down/left/right adjacent.

Find the number of islands.

Example
Example 1:

Input:
[
  [1,1,0,0,0],
  [0,1,0,0,1],
  [0,0,0,1,1],
  [0,0,0,0,0],
  [0,0,0,0,1]
]
Output:
3
Example 2:

Input:
[
  [1,1]
]
Output:
1

解题思路：用寻找Connected Components的思路，利用BFS_ALL的方法作为主函数去对每个点进行BFS，
每一趟BFS下来就会找到一片连接好的island, BFS_ALL全部点直到没有任何点没visited，就能数出全部岛屿了。

代码：
public class Solution {
    /**
     * @param grid: a boolean 2D matrix
     * @return: an integer
     */
    public int numIslands(boolean[][] grid) {
        // write your code here
        if (grid==null||grid.length==0||grid[0].length==0){
            return 0;
        }
        
        int n = grid.length;
        int m = grid[0].length;
        
        boolean[][] visited = new boolean[n][m];
        int islands_result = 0;
        
        for (int i = 0; i < n; i++){
            for (int j = 0; j < m; j++) {
                if (grid[i][j] && !visited[i][j]) {
                    BFS(grid, i, j, visited);
                    islands_result += 1;
                }
            }
        }
        return islands_result;
    }
    
    private void BFS(boolean[][] grid, int x, int y, boolean[][] visited) {
        int n = grid.length;
        int m = grid[0].length;
        // magic number for going four directions
        int[] dx = {1,0,0,-1};
        int[] dy = {0,1,-1,0};
        
        Queue<Integer> qx = new LinkedList<>();
        Queue<Integer> qy = new LinkedList<>();
        
        qx.offer(x);
        qy.offer(y);
        visited[x][y] = true;
        while(!qx.isEmpty()){
            int cur_x = qx.poll();
            int cur_y = qy.poll();
            
            for (int i = 0; i < 4; i++) { //遍历上下左右
                int neighbor_x = cur_x + dx[i];
                int neighbor_y = cur_y + dy[i];
                if ( neighbor_x >= 0 && neighbor_x < n && neighbor_y >= 0 && neighbor_y < m && !visited[neighbor_x][neighbor_y] && grid[neighbor_x][neighbor_y]) {
        
                    qx.offer(neighbor_x);
                    qy.offer(neighbor_y);
                    visited[neighbor_x][neighbor_y] = true;
                        
                }
            }
            
        }
       
    }
}
