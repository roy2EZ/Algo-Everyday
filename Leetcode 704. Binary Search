Classic Binary Search 经典二分法介绍
二分法是很多人刷题的第一个tag，因为它实用，常考，也是最经典的一种算法思维，又有比较好的模板可以让初学者快速上手
Question 题目
​https://leetcode.com/problems/binary-search/description/​

Definition 定义
给定一个排序数组和一个元素target，返回元素target的位置index

nums = [2,3,5,8,13,21,34,55,89] 
Target = 5 
expected result: return 2 
Implement 实现方式
递归：

优点：代码简洁

缺点：递归利用栈空间，递归层数过多会导致栈溢出

迭代（while loop):

优点：占用空间小

缺点：代码可读性稍差，不够简洁

​

面试的时候用什么？
如果用递归的方式写会好理解很多，就用递归写，不然就不用递归，在工程上，递归很容易导致栈溢出。这道题用最好用非递归的方式写，因为是很简短的

Template 通用模板
模板要点：
start + 1 < end：
我们的这个模板，在跳出 while loop时，是希望 start 和 end这两个index停留在相邻的两个位置，例如：
nums:  [ .....................,    15,     18 ,         19 ,        23 ......................]
index:    0                                   start       end                               n - 1

也就是 start + 1 = end 的时候跳出，这样我们要找的target可能是 nums[start] 或者 nums[end]。

这样的好处是避免那种start = end 时可能产生的死循环，而且很多相关的二分法题目，不只是在找某一个数值，而是寻找某种变化趋势 or 某两个数值之间的空隙/间隔的位置，所以这样的模板比较适合应对这样的题目。


 start + (end - start) / 2：

想要得到 start 和 end 之间的中点，直觉会想到就是 mid = (start + end) / 2
但是在 Java 里最好写成 mid = start + (end - start) / 2
防止在 start = 2^31 - 1, end = 2^31 - 1 的情况下进行整数加法导致溢出（ overflow）


关于Java的溢出：参考链接Java int 溢出总结
java的int是32位有符号整数类型，其最大值是0x7fffffff,最小值则是0x80000000。即int表示的数的范围是-2147483648 ～ 2147483647之间。当int类型的运算结果超出了这个范围时则发生了溢出，而且不会有任何异常抛出。

关于Python不会溢出：参考链接点击此处
python 没有 overflow 的问题，直接 // 2 就可以了：
在python2.7中，表示整数的有int和long两个类型。int类型和C++的int类似，都是一个固定位数的数；long则是一个理论上可以存储无限大数的数据类型。当你的数大到可能溢出时，python就会转换成long，这样就避免了溢出。而python3之后整数只有一个可以放任意大数的int了，更不会溢出。


nums[mid] 与 target的大小关系，要对 =, <, > 三种情况分开讨论，mid 不 +1 也不 -1
这样做的好处是条理清晰，也容易记忆，不会被start = mid还是mid - 1, end = mid还是 mid+1搞混。


while loop结束后，单独处理nums[start]和nums[end]:
因为我们的模板最后留下来了相邻的 start 和 end两个坐标，所以我们要去看 nums[start] 和 nums[end]到底哪一个才是 target。
这样的模板好处就是对于其他别的题目，我们最后也会做类似的处理，可以更正确地找到想要的结果，避免很多错误。比较这两下也只增加了 O(1) 常数时间，对于整个二分法的时间复杂度没有影响。 

Java
Python
class Solution {
    public int search(int[] nums, int target) {
       if (nums == null || nums.length == 0) {
            return -1;
        }
        
        int start = 0;
        int end = nums.length - 1;
        // 要点1: start + 1 < end
        while (start + 1 < end) {
        // 要点2：start + (end - start) / 2
            int mid = start + (end - start) / 2;
            // 要点3：=, <, > 分开讨论，mid不+1也不-1
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                start = mid;
            } else if (nums[mid] > target) {
                end = mid;
            }
        }
        
        // 要点4: 循环结束后，单独处理nums[start]和nums[end]
        if (nums[start] == target) {
            return start;
        }
        if (nums[end] == target) {
            return end;
        }
        return -1; 
    }
}
下面 Recursion 的解法，非常不推荐！

Java
Python3
// Recursion solution in Java
public int search(int[] nums, int target) {
        return binarySearch(nums, target, 0, nums.length - 1);
    }
    public int binarySearch(int[] nums, int target, int start, int end) {
        if (start > end) return -1;
        int mid = start + (end - start) / 2;
        if (nums[mid] == target) {
            return mid;
        } else if (nums[mid] < target) {
            return binarySearch(nums, target, mid + 1, end);
        } else {
            return binarySearch(nums, target, start, mid - 1);
        }   
    }
​

Running Time 时间复杂度
数据规模为n: 
T(n) = T(n/2)+O(1) 
其中O(1)为比较的时间复杂度，T(n/2)为比较之后 
时间复杂度是:O(logn) 
