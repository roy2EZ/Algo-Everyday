41.Maximum Subarray 最大子数组
给定一个整数数组，找到一个具有最大和的子数组，返回其最大和。
Given an array of integers, find a contiguous subarray which has the largest sum.

样例
Example1:

Input: [−2,2,−3,4,−1,2,1,−5,3]
Output: 6
Explanation: the contiguous subarray [4,−1,2,1] has the largest sum = 6.
Example2:

Input: [1,2,3,4]
Output: 10
Explanation: the contiguous subarray [1,2,3,4] has the largest sum = 10.
挑战
Can you do it in time complexity O(n)?

注意事项
The subarray should contain at least one number.



解题思路：利用前缀和数组prefixSum[]:
         子数组和：Sum[i ~ j] = prefixSum[j+1] - prefixSum[i]
         要让Sum[i ~ j]最大，则要减去最小的prefixSum[i],
         即 prefixSum[j+1]-min{prefixSum[0], prefixSum[1] ... prefixSum[j]}

public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A integer indicate the sum of max subarray
     */
    public int maxSubArray(int[] nums) {
        // write your code here
        
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int maxResult = Integer.MIN_VALUE; 
        int prefixSum = 0;
        int minPrefixSum = 0;
        
        for (int i = 0; i < nums.length; i++) {
            prefixSum += nums[i];
            maxResult = Math.max(maxResult, prefixSum - minPrefixSum);
            minPrefixSum = Math.min(minPrefixSum, prefixSum);
        }
        
        return maxResult;
        
    }
}
