153. Find Minimum in Rotated Sorted Array
寻找旋转排序数组中的最小值
题目
​https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/​

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. 假设按照升序排序的数组在预先未知的某个点上进行了旋转。

For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.

[0,1,2,4,5,6,7] if it was rotated 7 times.

Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums, return the minimum element of this array. 请找出其中最小的元素。

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
Constraints:

n == nums.length

1 <= n <= 5000

-5000 <= nums[i] <= 5000

All the integers of nums are unique. 没有重复元素

nums is sorted and rotated between 1 and n times.

​

分析

递增数组和旋转数组
用二分法，判断mid与end的大小，确定mid位于两段上升数组的哪一段：

1. nums[mid] < nums[end]:  mid在后段上升数组中，end = mid 

2. nums[mid] > nums[end]:  mid在前段上升数组中，start = mid

题解
Java
Python
class Solution {
    public int findMin(int[] nums) {
        // corner case
        if (nums.length == 0 || nums == null) return -1;
        
        // binary search
        int start = 0;
        int end = nums.length-1;
        while (start+1<end){
            int mid = start+(end-start)/2;
            if(nums[mid] < nums[end]){
                end = mid;
            }
            else if(nums[mid] > nums[end]){
                start = mid;
            }
        }
        if(nums[start] > nums[end]){
            return nums[end];
        }
        else {
            return nums[start];
        } 
    }
}
