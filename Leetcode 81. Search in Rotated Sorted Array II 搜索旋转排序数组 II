81. Search in Rotated Sorted Array II
搜索旋转排序数组 II
题目
​https://leetcode.com/problems/search-in-rotated-sorted-array-ii/​

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.假设按照升序排序的数组在预先未知的某个点上进行了旋转。

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).
( 例如，数组 [0,0,1,2,2,5,6] 可能变为 [2,5,6,0,0,1,2] )。

You are given a target value to search. If found in the array return true, otherwise return false.
编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 true，否则返回 false。

​

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Follow up:

This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.

Would this affect the run-time complexity? How and why?

分析
这是 33 搜索旋转排序数组 的延伸题目，本题中的 nums  可能包含重复元素。这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？

答：我们还是运用跟33题几乎一样的模板来做这道题，但是因为可能有重复元素，就要增加对worst case的情况处理，也就是 nums[mid] == nums[end]（中间那个数如果跟最后一个相等的情况），这种情况说明中间那个数前面所有都是在重复最后一个数，比如[1，1，1，2，1] (旋转之前是[1，1，1，1，2])。

处理的办法就是在while loop里往前移动end，即end--，直到nums[end]是不与nums[mid]重复的数字了，然后即可正常进行 33 题的解法。但是这样worst case就把时间复杂度降低为O(n)，其实失去了二分法的意义，因为O(n)的话暴力求解即可。所以有重复元素确实可能影响时间复杂度。

题解
Java
class Solution {
    public boolean search(int[] nums, int target) {
        // corner case
        if(nums.length == 0 || nums == null){
            return false;
        }
        
        // binary search
        int start = 0;
        int end = nums.length-1;
        while(start+1 < end){
            int mid = start+(end-start)/2;
            
            // mid在第一个上升区间
            if(nums[mid] > nums[end]){
                // 如果 target 在 start 和 mid 之间，该区间无翻转，正常二分
                if( nums[start] <= target && target <= nums[mid]){
                    // 前移 end
                    end = mid;
                } else {
                    // 在另一区间，则后移start, 继续做缩小范围后的此题
                    start = mid;
                }
            }
            // mid在第二个上升区间
            else if (nums[mid] < nums[end]){
                // 如果 target 在 mid 和 end 之间，该区间无翻转，正常二分
                if( nums[mid] <= target && target <= nums[end]){
                    // 后移 start
                    start = mid;
                } else {
                    // 在另一区间，前移 end，继续做缩小范围后的此题
                    end = mid;
                }
            } else {
                // worst case, nums[mid] == nums[end]
                // 把end前移，去掉重复情况
                end--;
            }
        }
        
        if(nums[start] == target){
            return true;
        }
        else if(nums[end] == target){
            return true;
        }
        else return false;
    }
}
