34. Find First and Last Position of Element in Sorted Array
在排序数组中查找元素的第一个和最后一个位置
题目
Given a sorted (in ascending order) integer array nums of n elements and a target value, write a function to search target in nums. If target exists, then return its index, otherwise return -1.

给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。如果数组中不存在目标值 target，返回 [-1, -1]。

来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

分析
利用二分法分别找到第一次出现的位置和最后一次出现的位置

题解
// Java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result = {-1,-1};
        if(nums.length <=0){
            return result;
        }
        
        int start = 0;
        int end = nums.length -1;
        //寻找第一次出现的位置
        while (start + 1 < end){
            int mid = start +(end-start)/2;
            if(nums[mid] == target){
                //第一次出现的位置，在前半段，end前移
                end = mid;
            } else if(nums[mid] < target){
                start = mid;
            } else {
                end = mid;
            }
        }
        if(nums[start] == target){
            result[0] = start;
        } else if(nums[end] == target){
            result[0] = end;
        }
        
        start = 0;
        end = nums.length -1;
        //寻找最后一次出现的位置
        while (start + 1 < end){
            int mid = start +(end-start)/2;
            if(nums[mid] == target){
                //第一次出现的位置，在后半段，start后移
                start = mid;
            } else if(nums[mid] < target){
                start = mid;
            } else {
                end = mid;
            }
        }
        if(nums[end] == target){
            result[1] = end;
        } else if(nums[start] == target){
            result[1] = start;
        } 
        return result;
        
    }
}
# python
class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        result = [-1,-1]
        if len(nums) <=0:
            return result
        
        start, end = 0, len(nums) -1
        #寻找第一次出现的位置
        while start + 1 < end:
            mid = start +(end-start)//2
            if nums[mid] == target:
                #第一次出现的位置，在前半段，end前移
                end = mid
            elif nums[mid] < target:
                start = mid
            else:
                end = mid
            
        if nums[start] == target:
            result[0] = start
        elif nums[end] == target:
            result[0] = end
        
        start, end = 0, len(nums) -1
        #寻找最后一次出现的位置
        while start + 1 < end:
            mid = start +(end-start)//2
            if nums[mid] == target:
                #第一次出现的位置，在后半段，start后移
                start = mid
            elif nums[mid] < target:
                start = mid
            else:
                end = mid
            
        if nums[end] == target:
            result[1] = end
        elif nums[start] == target:
            result[1] = start
        
        return result
        
