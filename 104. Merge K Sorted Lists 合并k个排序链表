98. Sort List 链表排序

在 O(n log n) 时间复杂度和常数级的空间复杂度下给链表排序。
Sort a linked list in O(n log n) time using constant space complexity.


Example 1:
Input:  1->3->2->null
Output:  1->2->3->null

Example 2:
Input: 1->7->2->6->null
Output: 1->2->6->7->null	

Challenge
Solve it by merge sort & quick sort separately.
  
解题思路：

用MergeSort,但是链表的中点需要用快慢指针的办法找到：
从head开始，快指针每次走两个next，慢指针走一个next，
这样当快指针走到尾巴的时候，慢指针就在链表的中点。
时间复杂度依然是O（nlogn）,虽然找中点从O（1）变成O（n）,
但是本来每一层merge的时候就要O(n), 现在变成O(2n)而已，
总时间复杂度还是一样。

也可以用QuickSort快速排序。只是Partition的时候不是两个指针从两边走，
而是开三个链表，一个是小于pivot的，一个等于的，一个大于的，
从前往后走一遍链表，遇到上述三个情况就分别去连，最后连上上面三个链表。

/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
// 解法1： 
public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: You should return the head of the sorted linked list, using constant space complexity.
     */
    public ListNode sortList(ListNode head) {
        // write your code here
        
        // corner case
        if (head == null || head.next == null) {
            return head;
        }
        
        // use helper function getMid() to get the middle of linkedlist
        ListNode mid = getMid(head);
        
        // 对右半个链表排序
        ListNode right = sortList(mid.next);
        // 然后扔掉右半部分，整个链表只剩左半部分
        mid.next = null;
        // 再对左半部分排序
        ListNode left = sortList(head);
        
        // 最后用merge把两部分连起来
        return merge(left, right);
        
    }
    
    // 得到中点的helper function， 利用快慢指针
    private ListNode getMid(ListNode head) {
        ListNode slow = head, fast = head.next;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    
    // merge的部分，先建立一个dummy node,tail指针从这个头开始，
    // 比较两个链表的头的value, tail.next不断链接较小的那个
    // 到最后两个链表的node都放进去了，返回dummy.next就是排好序的list的头
    
    ListNode merge(ListNode head1, ListNode head2) {
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        
        // 当head1和head2都不为null时，就一直while loop，
        // 直到其中一个链表的node都排进去了才跳出来
        while (head1 != null && head2 != null) {
            if (head1.val < head2.val) {
                tail.next = head1;
                head1 = head1.next;
            } else {
                tail.next = head2;
                head2 = head2.next;
            }
            tail = tail.next;
        }
        // tail去链接另一个链表没处理的那个最后一个node
        if (head1 != null) {
            tail.next = head1;
        } else {
            tail.next = head2;
        }
        
        // 最后返回整个排好的链表的头，注意是dummy的下一个
        return dummy.next;
    }
}
