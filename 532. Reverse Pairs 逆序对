532. Reverse Pairs 逆序对
Description
Reverse pair is a pair of numbers (A[i], A[j]) such that A[i] > A[j] and i < j. 
Given an array, return the number of reverse pairs in the array.
在数组中的两个数字如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。给你一个数组，求出这个数组中逆序对的总数。
概括：如果a[i] > a[j] 且 i < j， a[i] 和 a[j] 构成一个逆序对。

Example1
Input:  A = [2, 4, 1, 3, 5]
Output: 3
Explanation:
(2, 1), (4, 1), (4, 3) are reverse pairs

Example2
Input:  A = [1, 2, 3, 4]
Output: 0
Explanation:
No reverse pair

解题思路：分治法，利用mergeSort,分别排序左右两部分数组得到这两部分内部分别产生的逆序对数，然后在合并时计算出跨越两部分构成逆序对的个数


public class Solution {
    /**
     * @param A: an array
     * @return: total of reverse pairs
     */
    public long reversePairs(int[] A) {
        // write your code here
        return mergeSort(A, 0, A.length - 1);
        
    }
    
    //return how many reverse pairs in A[start, end]
    private int mergeSort(int[] A, int start, int end) { 
        if (start >= end) {
            return 0;
        } 
        int reversePairSum = 0;
        int mid = start + (end - start) / 2;
        reversePairSum += mergeSort(A, start, mid); // 排序左边并得到逆序对数
        reversePairSum += mergeSort(A, mid + 1, end); // 排序右边并得到逆序对数
        reversePairSum += merge(A, start, mid, end); // 计算两边之间的逆序对数
        
        return reversePairSum;
    }
    
    private int merge(int[] A, int start, int mid, int end) {
        int[] temp = new int[A.length]; 
        int index = start;
        
        // 左和右指针分别指向两段的起点
        int left = start;
        int right = mid + 1;
        int reversePairSum = 0;
        
        while (left <= mid && right <= end) { //两边都还有数
            if (A[left] <= A[right]) { //如果左边的头比右边的头小，不会产生逆序对，把左边头放进temp
                temp[index] = A[left];
                index++;
                left++;
            } else { //会产生逆序对
                temp[index] = A[right];
                reversePairSum += mid - left + 1; // 左边从指针(left)到左边结尾(mid)全部都可以跟右边头产生逆序对
                index++;
                right++;
            }
        }
        
        // 如果只剩一遍有，另一边没有，就不会再产生逆序对了，把剩的都放进temp
        while (left <= mid) {
            temp[index] = A[left];
            index++;
            left++;
        }
        while (right <= end) {
            temp[index] = A[right];
            index++;
            right++;
        }
        
        //最后把排完序的有序数组复制回A中
        for (int i = start; i <= end; i++) {
            A[i] = temp[i];
        }
        
        return reversePairSum;
    }
}
