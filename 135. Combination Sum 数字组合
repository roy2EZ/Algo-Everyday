135. Combination Sum 数字组合
给定一个候选数字的集合 candidates 和一个目标值 target. 找到 candidates 中所有的和为 target 的组合.
在同一个组合中, candidates 中的某个数字不限次数地出现.
Given a set of candidtate numbers candidates and a target number target. 
Find all unique combinations in candidates where the numbers sums to target.
The same repeated number may be chosen from candidates unlimited number of times.

样例
Example 1:

Input: candidates = [2, 3, 6, 7], target = 7
Output: [[7], [2, 2, 3]]
Example 2:

Input: candidates = [1], target = 3
Output: [[1, 1, 1]]
注意事项
All numbers (including target) will be positive integers.
Numbers in a combination a1, a2, … , ak must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak)
Different combinations can be in any order.
The solution set must not contain duplicate combinations.

解题思路：DFS
public class Solution {
    /**
     * @param candidates: A list of integers
     * @param target: An integer
     * @return: A list of lists of integers
     */
     
    private List<List<Integer>> answer = new ArrayList<>();
    
    private Stack<Integer> stack = new Stack<>();
    
    
    private void dfs(int[] candidates, int index, int target) {
        if (target == 0) {
            answer.add(new ArrayList<>(stack));
            return;
        }
        
        if (index >= candidates.length) return;
        
        if (index == 0 || candidates[index - 1] != candidates[index]) {
            int counter = 0;
            while (target >= 0){
                dfs(candidates, index+1,target);
                counter++;
                target-=candidates[index];
                stack.push(candidates[index]);
            }
            // 清空stack
            for (int i = 0; i<counter;i++) {
                stack.pop();
            }
        } else {
            dfs(candidates, index+1,target); // candidates[index-1] 和 candidates[index]相等就跳过
            
        }
    }
     
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        // write your code here
        Arrays.sort(candidates);
        dfs(candidates, 0, target);
        return answer;
    }
}
