5. Kth Largest Element 数组中第K大元素
Description
Find K-th largest element in an array.
在数组中找到第 k 大的元素。
You can swap elements in the array
你可以交换数组中的元素的位置

Example 1:
Input:
n = 1, nums = [1,3,4,2]
Output:
4

Example 2:
Input:
n = 3, nums = [9,3,2,4,8]
Output:
4

Challenge
O(n) time, O(1) extra memory.

解题思路：
分治法。跟FindKth一样，利用QuickSort思想去找第kth小个元素 （一般我们是要第K小，那么就把题目转成找第 n-k 个数）
FindKth的思路：
找一个pivot, 然后用partition功能把数组排序使得：数组左边<pivot, 数组右边>=pivot
如果左边元素个数比k多，说明要找的kth在左边，反之在右边。

public class Solution {
    /**
     * @param n: An integer
     * @param nums: An array
     * @return: the Kth largest element
     */
    public int kthLargestElement(int k, int[] nums) {
        // write your code here
        return partition (nums, 0, nums.length - 1, nums.length - k);
    }
    
    private int partition(int[] nums, int start, int end, int k) {
        // basecase
        if (start == end) {
            return nums[start];
        }
        
        int pivot = nums[(start + end)/2];
        int left = start, right = end;
        // 左右两个指针向中间走
        while (left <= right) {
            while (left <= right && nums[left] < pivot) {
                left++;
            }
            while (left <= right && nums[right] > pivot) {
                right--;
            } 
            
            // 经过上面两个while loop，
            // left停在了一个>= pivot的数，
            // right停在一个 <= pivot的数，
            // 交换这两个数然后继续总的while loop
            if (left <= right) {
                swap(nums, left, right);
                left++;
                right--;
            }
        }
        
        // 排序完毕，现在right指针在left的左边
        if (k <= right) {
            return partition(nums, start, right, k);
        }
        
        if (k >= left) {
            return partition(nums, left, end, k);
        }
        
        // 可能上面两个都不符合，正好right和left之间有一个，那个就是第k个
        return nums[k];
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
