61. Search for a Range 搜索区间
给定一个包含 n 个整数的排序数组，找出给定目标值 target 的起始和结束位置。
如果目标值不在数组中，则返回[-1, -1]
Given a sorted array of n integers, find the starting and ending position of a given target value.

If the target is not found in the array, return [-1, -1].

样例
Example 1:

Input:
[]
9
Output:
[-1,-1]

Example 2:

Input:
[5, 7, 7, 8, 8, 10]
8
Output:
[3, 4]
挑战
O(log n) time.

解题思路：二分法。
在sorted array里，lower_bound 就是 >= target 的第一个，upper_bound就是<= target 的第一个。
用二分法去思考什么区间有可能含有lower_bound/upper_bound,以此逐渐缩小区间。

public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: a list of length 2, [index1, index2]
     */
    public int[] searchRange(int[] A, int target) {
        // write your code here
        if (A == null || A.length == 0 ) {
            return new int[]{-1, -1};
        }
        
        int lb = lowerBound(A, target);
        int ub = upperBound(A, target);
        return new int[]{lb, ub};
    }
    
    private int lowerBound(int[] A, int target) {
        int start = 0, end = A.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start)/2;
            if (A[mid] < target) {
                start = mid + 1;
            } else if (A[mid] > target) {
                end = mid - 1;
            } else {
                end = mid;
            }
        }
        
        if (A[start] != target && A[end] != target) {
            return -1;
        } else {
            if (A[start] < A[end]) {
                return end;
            } 
            return start; 
        }
        
    }
    
    private int upperBound(int[] A, int target) {
        int start = 0, end = A.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (A[mid] > target) {
                end = mid - 1;
            } else if (A[mid] < target) {
                start = mid + 1;
            } else {
                start = mid;
            }
        }
        
        if (A[start] != target && A[end] != target) {
            return -1;
        } else {
            if (A[start] < A[end]) {
                return start;
            } 
            return end; 
        }
    }
}
