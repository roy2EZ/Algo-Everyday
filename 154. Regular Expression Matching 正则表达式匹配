154. Regular Expression Matching 正则表达式匹配

实现支持'.'和'*'的正则表达式匹配。
'.'匹配任意一个字母。
'*'匹配零个或者多个前面的元素。
匹配应该覆盖整个输入字符串，而不仅仅是一部分。
Implement regular expression matching with support for '.' and '*'.
'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).
The function prototype should be:

bool isMatch(string s, string p)

isMatch("aa","a") → false

isMatch("aa","aa") → true

isMatch("aaa","aa") → false

isMatch("aa", "a*") → true

isMatch("aa", ".*") → true

isMatch("ab", ".*") → true

isMatch("aab", "c*a*b") → true

样例
Example 1:

Input："aa"，"a"
Output：false
Explanation：
unable to match
Example 2:

Input："aa"，"a*"
Output：true
Explanation：
'*' can repeat a



解题思路：动态规划

public class Solution {
    /**
     * @param s: A string 
     * @param p: A string includes "." and "*"
     * @return: A boolean
     */
    public boolean isMatch(String s, String p) {
        // write your code here
        
        // top-down
        int m = s.length(), n = p.length();
        boolean[][] memo = new boolean[m][n];
        boolean[][] visited = new boolean[m][n];
        return helper(s,0,p,0,memo,visited);
        
    }
    
    private boolean helper(String s, int sIndex, 
                           String p, int pIndex, 
                           boolean[][] memo, boolean[][] visited) {
        // memo[i][j] -> s[0...i] p[0...j] 是否 match
        // visited[i][j] 
        if(pIndex == p.length()) { // p match 完了
            return sIndex == s.length();
        }
        
        if(sIndex == s.length()){ 
            return isEmpty(p,pIndex);
        }
        
        if(visited[sIndex][pIndex]){
            return memo[sIndex][pIndex];
        }
        
        char sChar = s.charAt(sIndex);
        char pChar = p.charAt(pIndex);
        boolean match = false;
        if (pIndex + 1 < p.length() && p.charAt(pIndex +1)=='*') {  // a* 这种情况
            match = helper(s, sIndex, p, pIndex + 2, memo, visited)  // not match
                    || (charMatch(sChar,pChar) && helper(s,sIndex+1,p,pIndex,memo,visited)); // match 1 or more
                    // abcc abc*  sChar = s[2] = c, pChar = c
        } else {
            match = charMatch(sChar,pChar) && helper(s,sIndex+1,p,pIndex+1,memo,visited);
        }
        
        visited[sIndex][pIndex] = true;
        memo[sIndex][pIndex] = match;
        return match;
    }
    
    private boolean charMatch(char sChar, char pChar){
        return sChar == pChar || pChar == '.';
    }
    
    private boolean isEmpty(String p, int pIndex){
        // 为了检查 a*b*c* 这种有可能为空的pattern
        for( int i =pIndex; i < p.length(); i += 2) {
            if (i+1 >= p.length() || p.charAt(i+1) != '*') {
                return false;
            }
        }
        return true;
    }
    
}
